@page "/"
@inject NavigationManager navManager
@inject AuthenticationStateProvider authProvider
@inject IUserData userData
@inject ITeamData teamData
@inject IGameData gameData
@inject IGameService gameService
@using Syncfusion.Blazor.Grids
@using Syncfusion.Blazor.Notifications

<PageTitle>Home</PageTitle>

<div style="width:75%;margin: 0 auto;">
    <SfGrid DataSource="@games?.OrderBy(g => g.DateTime)">
        <GridColumns>
            <GridColumn Width="80"
                    HeaderText="Date"
                    TextAlign="TextAlign.Center">
            </GridColumn>
            <GridColumn Width="200"
                        HeaderText="Away/Home"
                        TextAlign="TextAlign.Center">
            </GridColumn>
            <GridColumn HeaderText="Point Spread"
                        TextAlign="TextAlign.Center">
            </GridColumn>
            <GridColumn HeaderText="Moneyline" 
                        TextAlign="TextAlign.Center">
            </GridColumn>
            <GridColumn HeaderText="Over/Under"
                        TextAlign="TextAlign.Center">
            </GridColumn>
            <GridColumn Width="80"
                        HeaderText="Other"
                        TextAlign="TextAlign.Center">
            </GridColumn>
        </GridColumns>
        <GridTemplates>
            <RowTemplate>
                @{
                    var game = (context as Game);
                    @if (game?.HasStarted == false)
                    {
                        <td class="cell" style="text-align:center;">
                            <div style="padding: .5em .5em;">
                                <strong>@game?.Date.ToString("M-d")</strong>
                            </div>
                            <div style="padding:.5em .5em;">
                                <strong>@game?.Date.ToString("h:mm")</strong>
                            </div>
                        </td>
                        <td class="cell" style="text-align:center;">
                            <div class="teams">
                                <div style="padding: .5em .5em;border-bottom: 1px solid lightgrey;">
                                    <img class="team-icon-top-row" src="@string.Concat($"images/{game?.AwayTeam.ToLower()}", ".svg")" /> <strong class="team-name">@game?.AwayTeam</strong>
                                </div>
                                <div style="padding:.5em .5em;">
                                    <strong class="at-sign">@@</strong><img class="team-icon-bottom-row" src="@string.Concat($"images/{game?.HomeTeam.ToLower()}", ".svg")" /> <strong class="team-name">@game?.HomeTeam</strong>
                                </div>
                            </div>

                        </td>
                        <td class="cell">

                            <div @onclick="(() => SelectOrRemoveWinnerAndGameForPointSpreadBet(game!.AwayTeam, game))" 
                                class="@GetCellClass(game!.AwayTeam, game, BetType.POINTSPREAD)">
                                <div style="display:flex;justify-content:space-evenly;">
                                    <strong style="margin-right:.5em;">@GetPointSpreadForAwayTeam(game?.PointSpread)</strong>
                                    <strong>@GetMoneyLine(game?.PointSpreadAwayTeamMoneyLine)</strong>
                                </div>
                            </div>

                            <div @onclick="(() => SelectOrRemoveWinnerAndGameForPointSpreadBet(game!.HomeTeam, game))" 
                                class="@GetCellClass(game!.HomeTeam, game, BetType.POINTSPREAD)">
                                <div style="display:flex;justify-content:space-evenly;">
                                    <strong style="margin-right:.5em;">@GetPointSpreadForHomeTeam(game?.PointSpread)</strong>
                                    <strong>@GetMoneyLine(game?.PointSpreadHomeTeamMoneyLine)</strong>
                                </div>
                            </div>
                                                                                                
                        </td>
                        <td class="cell" style="text-align:center;">

                            <div @onclick="(() => SelectOrRemoveWinnerAndGameForMoneylineBet(game!.AwayTeam, game))" 
                                class="@GetCellClass(game!.AwayTeam, game, BetType.MONEYLINE)">
                                <strong>@GetMoneyLine(game?.AwayTeamMoneyLine)</strong>
                            </div>

                            <div @onclick="(() => SelectOrRemoveWinnerAndGameForMoneylineBet(game!.HomeTeam, game))" 
                                class="@GetCellClass(game!.HomeTeam, game, BetType.MONEYLINE)">
                                <strong>@GetMoneyLine(game?.HomeTeamMoneyLine)</strong>
                            </div>

                        </td>
                        <td class="cell">

                            <div @onclick="(() => SelectOrRemoveWinnerAndGameForOverUnder(string.Concat(OverUnder.OVER.ToStringFast(), game?.ScoreID.ToString()), game!))" 
                                class="@GetCellClass(string.Concat(OverUnder.OVER.ToStringFast(), game?.ScoreID.ToString()), game!, BetType.OVERUNDER)">
                                <div style="display:flex;justify-content:space-evenly;">
                                    <strong>Over @game?.OverUnder</strong>
                                    <strong>@GetMoneyLine(@game?.OverPayout)</strong>
                                </div>
                            </div>

                            <div @onclick="(() => SelectOrRemoveWinnerAndGameForOverUnder(string.Concat(OverUnder.UNDER.ToStringFast(), game?.ScoreID.ToString()), game!))" 
                                class="@GetCellClass(string.Concat(OverUnder.UNDER.ToStringFast(), game?.ScoreID.ToString()), game!, BetType.OVERUNDER)">
                                <div style="display:flex;justify-content:space-evenly;">
                                    <strong>Under @game?.OverUnder</strong>
                                    <strong>@GetMoneyLine(game?.UnderPayout)</strong>
                                </div>
                            </div>

                        </td>
                        <td class="cell">
                            <div class="other-button">
                                <strong>Other Wagers</strong>
                            </div>
                        </td>
                    }
                }
            </RowTemplate>
        </GridTemplates>
    </SfGrid>
</div>

<div>
    Bets: 
</div>

<div class="game-info-container">

    @foreach(CreateBetDto createBetDto in preBets)
    {
        <div class="input-box">
            <label>@createBetDto.MoneylinePayout</label>
            <input type="number" @bind-value="@createBetDto.BetAmount" @bind-value:event="oninput"/>
        </div>
    }

    <div>
        <strong>Total Wager Singles:</strong>
        <strong>@Math.Round(GetPayoutForTotalBetsSingles()!, 2) </strong>
    </div>

    <div>
        <strong>Total Wager Parley:</strong>
        <strong>@Math.Round((decimal)GetPayoutForTotalBetsParley()!, 2)</strong>
        <input type="number" @bind-value="@totalWagerForParley" @bind-value:event="oninput" />
    </div>

</div>



<style>

    .clickable-cell {
        padding: .65em .65em;
        border: 1px solid lightgrey;
        background-color: palegreen;
    }

        .clickable-cell:hover {
            cursor:pointer;
            background-color: rgb(152, 251, 152, .5);
        }

    .clickable-cell-active {
        padding: .65em .65em;
        border: 1px solid lightgrey;
        background-color: rgb(255,99,71);
    }

        .clickable-cell-active:hover {
            cursor: pointer;
            background-color: rgb(255,99,71, .5);
        }

    .cell {
        border-bottom: 1px solid black;
        font-size:11px;
    }

    .other-button {

        padding: 1.25em 1.25em;
        border: 1px solid lightgrey;
        border-right:4px solid white;
        background-color: palegreen;
        text-align: center;
    }

        .other-button:hover {
            background-color: rgb(152, 251, 152, .5);
            cursor: pointer;
        }

    .teams {
        
    }

        .teams:hover {
            background-color: rgb(211,211,211, .9);
            cursor: pointer;
        }
    
    .team-name {
        font-size:11px;
    }

    .team-icon-top-row {
        height: 25px;
        margin-right: .5em;
        margin-left: 1.25em;
    }

    .team-icon-bottom-row {
        height: 25px;
        margin-right: .5em;
    }

    .at-sign {
        margin-right: .5em;
        font-size: 13px;
    }

    .e-headercell {
        font-family: "Bell MT";
        color: darkgreen;
    }

</style>

@code {

    Game[]? games;
    int week;
    SeasonType season;
    private readonly PeriodicTimer _timer = new(TimeSpan.FromMinutes(5));
    Dictionary<string, Game> winnersAndGamesForPointSpreadDictionary = new();
    Dictionary<string, Game> winnersAndGamesForMoneylineDictionary = new();
    Dictionary<string, Game> winnersAndGamesForOverUnderDictionary = new();
    List<CreateBetDto> preBets = new();
    decimal totalWagerForParley;
    decimal totalPayoutForParley;


    protected override async Task OnInitializedAsync()
    {
        games = await gameService.GetGamesByWeek(SeasonType.PRE, 3);
        season = DateTime.Now.CalculateSeason();
        week = season.CalculateWeek(DateTime.Now);
    }

    private decimal GetPayoutForTotalBetsParley()
    {
        decimal totalDecimalOdds = 1;

        foreach (CreateBetDto createBetDto in preBets)
        {

            decimal decimalMoneyline = createBetDto.MoneylinePayout < 0 ? 
                    (100 / (decimal)createBetDto.MoneylinePayout) + (decimal)1 
                    : ((decimal)createBetDto.MoneylinePayout / 100) + 1;

            totalDecimalOdds *= decimalMoneyline;

        }

        if (totalDecimalOdds <= 0)
            throw new Exception("Odds Negative Or Zero");

        return totalPayoutForParley = totalWagerForParley * totalDecimalOdds;
    }

    private decimal GetPayoutForTotalBetsSingles()
    {
        decimal total = 0;

        foreach(CreateBetDto createBetDto in preBets)
        {
            decimal betPayout = createBetDto.MoneylinePayout < 0 ?
                     createBetDto.BetAmount / ((decimal)createBetDto.MoneylinePayout * -1 / 100) + createBetDto.BetAmount 
                     : ((decimal)createBetDto.MoneylinePayout / 100) * createBetDto.BetAmount;

            total += betPayout;
        }

        return total;
    }

    private string GetCellClass(string winner, Game game, BetType betType)
    {
        CreateBetDto? createBetDto = preBets
            .Where(b => b.Winner == winner && b.Game == game && b.BetType == betType)
            .FirstOrDefault();

        return preBets.Contains(createBetDto!)
                ? "clickable-cell-active" : "clickable-cell";
    }

    private void SelectOrRemoveWinnerAndGameForPointSpreadBet(string winner, Game game)
    {
        CreateBetDto? createBetDto = preBets
            .Where(b => b.Winner == winner && b.Game == game && b.BetType == BetType.POINTSPREAD)
            .FirstOrDefault();

        if(createBetDto is not null)
        {
            preBets.Remove(createBetDto);
            return;
        }

        int moneylinePayout = 
            winner == game.AwayTeam ? (int)game.PointSpreadAwayTeamMoneyLine! 
            : (int)game.PointSpreadHomeTeamMoneyLine!;

        preBets.Add(new CreateBetDto
        {
            Id = Guid.NewGuid(),
            BetType = BetType.POINTSPREAD,
            BetAmount = 0,
            MoneylinePayout = moneylinePayout,
            Game = game,
            Winner = winner
        });
    }

    private void SelectOrRemoveWinnerAndGameForMoneylineBet(string winner, Game game)
    {
        CreateBetDto? createBetDto = preBets
            .Where(b => b.Winner == winner && b.Game == game && b.BetType == BetType.MONEYLINE)
            .FirstOrDefault();

        if (createBetDto is not null)
        {
            preBets.Remove(createBetDto);
            return;
        }

        int moneylinePayout =
            winner == game.AwayTeam ? (int)game.AwayTeamMoneyLine!
            : (int)game.HomeTeamMoneyLine!;

        preBets.Add(new CreateBetDto
        {
            Id = Guid.NewGuid(),
            BetType = BetType.MONEYLINE,
            BetAmount = 0,
            MoneylinePayout = moneylinePayout,
            Game = game,
            Winner = winner
        });
    }


    private void SelectOrRemoveWinnerAndGameForOverUnder(string overUnderAndScoreId, Game game)
    {
        CreateBetDto? createBetDto = preBets
            .Where(b => b.Winner == overUnderAndScoreId && b.Game == game && b.BetType == BetType.OVERUNDER)
            .FirstOrDefault();

        if (createBetDto is not null)
        {
            preBets.Remove(createBetDto);
            return;
        }

        int moneylinePayout =
            overUnderAndScoreId[0] == 'O' ? (int)game.OverPayout!
            : (int)game.UnderPayout!;

        preBets.Add(new CreateBetDto
        {
            Id = Guid.NewGuid(),
            BetType = BetType.OVERUNDER,
            BetAmount = 0,
            MoneylinePayout = moneylinePayout,
            Game = game,
            Winner = overUnderAndScoreId
        });
    }

    //protected override async Task OnAfterRenderAsync(bool firstRender)
    //{
    //    if (firstRender) await StartGameUpdateLoop();
    //}

    private async Task StartGameUpdateLoop()
    {
        int index = 1;

        while (await _timer.WaitForNextTickAsync())
        {
            season = DateTime.Now.CalculateSeason();
            week = season.CalculateWeek(DateTime.Now);
            games = await gameService.GetGamesByWeek(season, week);
            Console.WriteLine($"Timer trigger count: {index}");
            index++;
        }
    }

    private string GetPointSpreadForAwayTeam(float? pointSpread)
    {
        return pointSpread > 0 ? $"- {pointSpread}" 
               : pointSpread == 0 ? "0" 
               : $"+ {pointSpread?.ToString().Trim('-')}";
    }

    private string GetPointSpreadForHomeTeam(float? pointSpread)
    {
        return pointSpread > 0 ? $"+ {pointSpread}"
               : pointSpread == 0 ? "0"
               : $"- {pointSpread?.ToString().Trim('-')}";
    }

    private string GetMoneyLine(int? moneyline)
    {
        return moneyline > 0 ? $"+ {moneyline}" 
               : $"- {moneyline?.ToString().Trim('-')}";
    }
}
