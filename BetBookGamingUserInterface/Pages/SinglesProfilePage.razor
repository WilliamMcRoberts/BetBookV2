@page "/SinglesProfilePage"
@inject ILogger<SinglesProfilePage> logger
@inject IMongoUserData userData
@inject AuthenticationStateProvider authProvider
@inject IMongoSingleBetData singleBetData
@inject IGameService gameService

<PageTitle>SinglesProfilePage</PageTitle>

@if (isBusy)
{
    <LoadingSpinner />
}

else
{
    <FootballSpinners/>

    <div class="bar">
        <button @onclick="(() => SetSingleDataGrid(SingleBetStatus.IN_PROGRESS))" class="btn btn-light btn-sm mt-2 mb-2 bet-button">Active</button>
        <button @onclick="(() => SetSingleDataGrid(SingleBetStatus.WINNER))" class="btn btn-light btn-sm mt-2 mb-2 bet-button">Winners</button>
        <label class="grad-title" style="margin-top:.75em">Single Bets</label>
        <button @onclick="(() => SetSingleDataGrid(SingleBetStatus.PUSH))" class="btn btn-light btn-sm mt-2 mb-2 bet-button">Push</button>
        <button @onclick="(() => SetSingleDataGrid(SingleBetStatus.LOSER))" class="btn btn-light btn-sm mt-2 mb-2 bet-button">Losers</button>
    </div>

    <div class="data-grid-container-profile">
        <SfGrid ID="DataGrid" DataSource="@GetSingleBetList()">
            <GridColumns>
                <GridColumn 
                            HeaderText="Date"
                            TextAlign="TextAlign.Center">
                </GridColumn>
                <GridColumn 
                            HeaderText="Game"
                            TextAlign="TextAlign.Center">
                </GridColumn>
                <GridColumn HeaderText="BetType"
                            TextAlign="TextAlign.Center">
                </GridColumn>
                <GridColumn HeaderText="Bet Payout"
                            TextAlign="TextAlign.Center">
                </GridColumn>
                <GridColumn HeaderText="Winner"
                            TextAlign="TextAlign.Center">
                </GridColumn>
            </GridColumns>
            <GridTemplates>
                <RowTemplate>
                    @{
                        var bet = (context as SingleBetModel);

                        <td class="@GetCellClass(bet!)" style="text-align:center;">
                            <div style="padding: .5em .5em;">
                                <strong>@bet?.GameSnapshot.Date.ToString("M-d")</strong>
                            </div>
                            <div style="padding:.5em .5em;">
                                <strong>@bet?.GameSnapshot.Date.ToString("h:mm")</strong>
                            </div>
                        </td>
                        <td class="@GetCellClass(bet!)" style="text-align:center;">
                            <div @onclick="((mouseArgs) => ShowGameDetailsSingleBetModal(mouseArgs, bet))" class="teams-single">
                                <div style="padding: .5em .5em;border-bottom: 1px solid lightgrey;">
                                    <img class="team-icon-top-row" src="@string.Concat($"images/{bet?.GameSnapshot.AwayTeam.ToLower()}", ".svg")" /> <strong class="team-name">@bet?.GameSnapshot.AwayTeam</strong>
                                </div>
                                <div style="padding:.5em .5em;">
                                    <strong class="at-sign">@@</strong><img class="team-icon-bottom-row" src="@string.Concat($"images/{@bet?.GameSnapshot.HomeTeam.ToLower()}", ".svg")" /> <strong class="team-name">@bet?.GameSnapshot.HomeTeam</strong>
                                </div>
                            </div>
                        </td>
                        <td class="@GetCellClass(bet!)" style="text-align:center;">

                            <div>
                                <strong>@bet?.BetType</strong>
                            </div>

                        </td>
                        <td class="@GetCellClass(bet!)" style="text-align:center;">

                            <div>
                                <strong>$@bet?.BetPayout.ToString("#,##0.00")</strong>
                            </div>

                        </td>
                        <td class="@GetCellClass(bet!)" style="text-align:center;">
                            @if(bet?.BetType == BetType.POINTSPREAD)
                            {
                                <strong>@bet?.WinnerChosen @GetPointsAfterSpreadForDisplay(bet!.PointsAfterSpread)</strong>
                            }
                            else if(bet?.BetType == BetType.OVERUNDER)
                            {
                                <strong>@bet?.WinnerChosen @bet?.GameSnapshot.OverUnder</strong>
                            }
                            else 
                            {
                                <strong>@bet?.WinnerChosen</strong>
                            }
                        </td>
                    }
                </RowTemplate>
            </GridTemplates>
        </SfGrid>
    </div>

    <div class="data-grid-container-profile-mini">
        <SfGrid ID="DataGrid" DataSource="@GetSingleBetList()">
            <GridColumns>
                <GridColumn HeaderText="Game"
                            TextAlign="TextAlign.Center">
                </GridColumn>
                <GridColumn HeaderText="BetType"
                            TextAlign="TextAlign.Center">
                </GridColumn>
                <GridColumn HeaderText="Bet Payout"
                            TextAlign="TextAlign.Center">
                </GridColumn>
                <GridColumn HeaderText="Winner"
                            TextAlign="TextAlign.Center">
                </GridColumn>
            </GridColumns>
            <GridTemplates>
                <RowTemplate>
                    @{
                        var bet = (context as SingleBetModel);

                        <td class="@GetCellClass(bet!)" style="text-align:center;">
                            <div @onclick="((mouseArgs) => ShowGameDetailsSingleBetModal(mouseArgs, bet))" class="teams-single">
                                <div style="padding: .5em .5em;border-bottom: 1px solid lightgrey;">
                                    <img class="team-icon-top-row" src="@string.Concat($"images/{bet?.GameSnapshot.AwayTeam.ToLower()}", ".svg")" /> <strong class="team-name">@bet?.GameSnapshot.AwayTeam</strong>
                                </div>
                                <div style="padding:.5em .5em;">
                                    <strong class="at-sign">@@</strong><img class="team-icon-bottom-row" src="@string.Concat($"images/{@bet?.GameSnapshot.HomeTeam.ToLower()}", ".svg")" /> <strong class="team-name">@bet?.GameSnapshot.HomeTeam</strong>
                                </div>
                            </div>
                        </td>
                        <td class="@GetCellClass(bet!)" style="text-align:center;">
                            <strong>@bet?.BetType</strong>
                        </td>
                        <td class="@GetCellClass(bet!)" style="text-align:center;">
                            <strong>$@bet?.BetPayout.ToString("#,##0.00")</strong>
                        </td>
                        <td class="@GetCellClass(bet!)" style="text-align:center;">
                            @if (bet?.BetType == BetType.POINTSPREAD)
                            {
                                <strong>@bet?.WinnerChosen @GetPointsAfterSpreadForDisplay(bet!.PointsAfterSpread)</strong>
                            }
                            else if (bet?.BetType == BetType.OVERUNDER)
                            {
                                <strong>@bet?.WinnerChosen @bet?.GameSnapshot.OverUnder</strong>
                            }
                            else
                            {
                                <strong>@bet?.WinnerChosen</strong>
                            }
                        </td>
                    }
                </RowTemplate>
            </GridTemplates>
        </SfGrid>
    </div>
}


@code {

    [CascadingParameter]
    public ModalWrapper ModalWrapper { get; set; }

    List<SingleBetModel> bettorSingleBets = new();
    List<SingleBetModel> bettorSingleBetsInProgress = new();
    List<SingleBetModel> bettorSingleBetsWinners = new();
    List<SingleBetModel> bettorSingleBetsPush = new();
    List<SingleBetModel> bettorSingleBetsLosers = new();
    UserModel loggedInUser;
    bool singleWinnersGrid;
    bool singleInProgressGrid;
    bool singlePushGrid;
    bool singleLosersGrid;
    bool isBusy;

    protected override async Task OnInitializedAsync()
    {
        isBusy = true;
        loggedInUser = await authProvider.GetUserFromAuth(userData);

        bettorSingleBets = await singleBetData.GetBettorSingleBets(loggedInUser.UserId);

        bettorSingleBetsInProgress =
            bettorSingleBets.Where(pb =>
                pb.SingleBetStatus == SingleBetStatus.IN_PROGRESS).ToList();

        bettorSingleBetsWinners =
            bettorSingleBets.Where(pb =>
                pb.SingleBetStatus == SingleBetStatus.WINNER).ToList();

        bettorSingleBetsPush =
            bettorSingleBets.Where(pb =>
                pb.SingleBetStatus == SingleBetStatus.PUSH).ToList();

        bettorSingleBetsLosers =
            bettorSingleBets.Where(pb =>
                pb.SingleBetStatus == SingleBetStatus.LOSER).ToList();

        isBusy = false;
    }

    private async Task ShowGameDetailsSingleBetModal(MouseEventArgs mouseEventArgs, SingleBetModel wager)
    {
        GameByScoreIdDto finishedGame = await gameService.GetGameByScoreId(wager.GameSnapshot.ScoreID);

        var ParameterArguments = new Dictionary<string, object>
        {
            ["FinishedGame"] = finishedGame,
            ["Wager"] = wager
        };

        ModalWrapper.ShowModal(mouseEventArgs, typeof(FinishedGameDetailsSingleBet), ParameterArguments);
    }

    private string GetPointsAfterSpreadForDisplay(decimal pointsAfterSpread) =>
        pointsAfterSpread < 0 ? $"- {pointsAfterSpread.ToString().Trim('-')}" 
            : $"+ {pointsAfterSpread}";

    private void SetSingleDataGrid(SingleBetStatus singleBetStatus) =>
        (singleInProgressGrid, singleWinnersGrid, singlePushGrid, singleLosersGrid) =
            singleBetStatus == SingleBetStatus.LOSER ? (false, false, false, true) :
            singleBetStatus == SingleBetStatus.WINNER ? (false, true, false, false) :
            singleBetStatus == SingleBetStatus.PUSH ? (false, false, true, false)
            : (true, false, false, false);

    private List<SingleBetModel> GetSingleBetList() =>
        singleLosersGrid ? bettorSingleBetsLosers 
            : singleWinnersGrid ? bettorSingleBetsWinners 
            : singlePushGrid ? bettorSingleBetsPush 
            : bettorSingleBetsInProgress;

    private string GetCellClass(SingleBetModel singleBet) =>
        singleLosersGrid ? (bettorSingleBetsLosers.IndexOf(singleBet) == bettorSingleBetsLosers.Count - 1 ? "bottom-row-cell" : "cell")
            : singleWinnersGrid ? (bettorSingleBetsWinners.IndexOf(singleBet) == bettorSingleBetsWinners.Count - 1 ? "bottom-row-cell" : "cell")
            : singlePushGrid ? (bettorSingleBetsPush.IndexOf(singleBet) == bettorSingleBetsPush.Count - 1 ? "bottom-row-cell" : "cell")
            : bettorSingleBetsInProgress.IndexOf(singleBet) == bettorSingleBetsInProgress.Count - 1 ? "bottom-row-cell" : "cell";
}