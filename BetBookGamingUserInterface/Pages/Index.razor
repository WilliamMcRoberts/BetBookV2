@page "/"
@inject ILogger<Index> logger
@inject IMongoUserData userData
@inject IMongoSingleBetData sb
@inject IGameService gameService

<PageTitle>Home</PageTitle>

@if(!isBusy)
{
    <FootballSpinners />

    <div id="scrollBox" class="scroll-box">
        <h2 class="scroll-text">Scroll Down</h2>
        <img class="scroll-img" src="/images/arrowdown.png" />
        <h2 class="scroll-text">For Games</h2>
    </div>

    <div id="scrollBoxWeek">
        <h2 id="weekText">Week @week</h2>
    </div>
    
        
    <div id="hiddenContent">
        <GamesDisplay Games="games" />
    </div>

    <div class="b-slip">
        <AccordionBetSlip OnValidSubmit="@ShowToast" LoggedInUser="loggedInUser" />
    </div>
}

else 
{
    <LoadingSpinnerCircle />
}

<SfToast @ref="ToastObj" Timeout="@time" ShowCloseButton="true" 
    Title="Good Luck On Your New Wager!" Content="@Content">
    <ToastPosition X="Right" Y="Bottom"></ToastPosition>
    <ToastAnimationSettings>
        <ToastShowAnimationSettings Effect="@ShowAnimation" />
        <ToastHideAnimationSettings Effect="@HideAnimation" />
    </ToastAnimationSettings>
</SfToast>

<style>

    #weekText {
        font-family: 'Rubik Distressed', cursive;
        position:relative;
        font-size:6em;
        letter-spacing:.15em;
        color: #380474;
        text-transform:uppercase;
        width:100%;
        text-align:center;
        -webkit-box-reflect: below 1px linear-gradient(transparent, rgba(0,0,0,0.5));
        line-height:0.70em;
        outline:none;
        animation: animateWeekText 10s linear infinite;
    }

    @@keyframes animateWeekText {
        0%,18%,20%,50.1%,60%,65.1%,80%,90.1%,92% {
            color: #380474;
            box-shadow: none;
        }
        18.1%,20.1%,30%,50%,60.1%,65%,80.1%,90%,92.1%,100% {
            color: #fff	;
                text-shadow: 0 0 10px #380474, 0 0 20px #380474, 0 0 40px #380474, 0 0 80px #380474, 0 0 160px #380474;
        }
    }

    @@media(max-width: 800px) {
        #weekText {
            font-size:5em;
        }
    }

    @@media(max-width: 680px) {
        #weekText {
            font-size: 4em;
        }
    }

    @@media(max-width: 560px) {
        #weekText {
            font-size: 3em;
        }
    }

    @@media(max-width: 440px) {
        #weekText {
            font-size: 2.35em;
        }
    }

    #scrollBoxWeek {
        position: center;
        opacity: 0;
        margin: 0 auto;
        margin-bottom: 4em;
        text-align: center;
        width: 70%;
    }

    .b-slip {
        position:sticky;
        z-index: 3;
        right: 0;
        bottom: 3%;
        left: 0;
        visibility: @(BetSlip.PreBets.Count > 0 ? "visible" : "hidden");
    }

    .e-grid .e-spinner-pane {
        display: none;
    }

    .e-toast-container .e-toast {
        background-color: rgba(0,0,0, .9);
        border: 1px solid white;
        border-radius: 10px;
        backdrop-filter: blur(10px);
    }

        .e-toast-container .e-toast:hover {
            background-color: rgba(0,0,0, .9);
        }

        .e-toast-container .e-toast .e-toast-message .e-toast-title {
            color: white;
            font-weight: 700;
        }

        .e-toast-container .e-toast .e-toast-message .e-toast-content {
            color: white;
            font-weight: 700;
        }
</style>

@code {

    [CascadingParameter]
    public Task<AuthenticationState> AuthenticationStateTask { get; set; }

    [CascadingParameter]
    public CascadingBetSlipState BetSlip { get; set; }

    #region Toast

    public SfToast ToastObj;
    int time = 60000;
    private ToastEffect ShowAnimation = ToastEffect.FadeIn;
    private ToastEffect HideAnimation = ToastEffect.FadeOut;
    private string Content => $"Thank you for choosing Bet Book.";

    #endregion

    #region Fields

    private bool betSlipVisible;
    private bool isBusy;
    private UserModel loggedInUser;
    private int week;
    private SeasonType season;

    #endregion

    #region Collections

    private GameDto[] games;

    #endregion

    #region OnInitializedAsync

    protected override async Task OnInitializedAsync()
    {
        isBusy = true;
        season = DateTime.Now.CalculateSeason();
        week = season.CalculateWeek(DateTime.Now);
        games = await gameService.GetGamesByWeek(season, week);
        isBusy = false;
        await LoadAndVerifyUser();
    }

    #endregion

    #region Other Methods

    private async Task ShowToast()
    {
        await ToastObj.ShowAsync();
    }

    private async Task LoadAndVerifyUser()
    {
        var authState = await AuthenticationStateTask;
        string objectId = authState.User.Claims.FirstOrDefault(c => c.Type.Contains("objectidentifier"))?.Value;
        loggedInUser = await userData.GetCurrentUserFromAuthentication(objectId) ?? new();

        if (string.IsNullOrWhiteSpace(objectId)) return;

        string firstName = authState.User.Claims.FirstOrDefault(c => c.Type.Contains("givenname"))?.Value;
        string lastName = authState.User.Claims.FirstOrDefault(c => c.Type.Contains("surname"))?.Value;
        string displayName = authState.User.Claims.FirstOrDefault(c => c.Type.Equals("name"))?.Value;
        string emailAddress = authState.User.Claims.FirstOrDefault(c => c.Type.Contains("email"))?.Value;

        bool isDirty = false;

        if (!objectId.Equals(loggedInUser.ObjectIdentifier))
        {
            isDirty = true;
            loggedInUser.ObjectIdentifier = objectId;
        }

        if (!firstName.Equals(loggedInUser.FirstName))
        {
            isDirty = true;
            loggedInUser.FirstName = firstName;
        }

        if (!lastName.Equals(loggedInUser.LastName))
        {
            isDirty = true;
            loggedInUser.LastName = lastName;
        }

        if (!displayName.Equals(loggedInUser.DisplayName))
        {
            isDirty = true;
            loggedInUser.DisplayName = displayName;
        }

        if (!emailAddress.Equals(loggedInUser.EmailAddress))
        {
            isDirty = true;
            loggedInUser.EmailAddress = emailAddress;
        }

        if (isDirty)
        {
            if (string.IsNullOrWhiteSpace(loggedInUser.UserId))
            {
                loggedInUser.AccountBalance = 10000;

                await userData.CreateUser(loggedInUser);
                return;
            }

            await userData.UpdateUser(loggedInUser);
        }
    }

    #endregion

}
