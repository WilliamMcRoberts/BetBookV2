@page "/"
@inject NavigationManager navManager
@inject ILogger<Index> logger
@inject IMongoUserData userData
@inject IMongoSingleBetData singleBetData
@inject IMongoParleyBetSlipData parleyBetSlipData
@inject IGameService gameService
@inject BetSlipState betSlip
@inject ProtectedLocalStorage localStorage

<PageTitle>Home</PageTitle>

@if(isBusy)
{
    <LoadingSpinnerCircle />
}

else 
{
    <FootballSpinners/>

    <AccordionBetSlip OnValidSubmit="@ShowToast" LoggedInUser="loggedInUser"/>

    <div class="bar">
        <div style="margin:.5em;">
            <label class="grad-title-week" style="margin:.35em auto;font-weight: 900;">Week @week</label>
        </div>
    </div>

    <div class="data-grid-container">
        <SfGrid ID="DataGrid" DataSource="@games?.OrderBy(g => g.DateTime)">
            <GridColumns>
                <GridColumn Width="80"
                        HeaderText="Date"
                        TextAlign="TextAlign.Center">
                </GridColumn>
                <GridColumn Width="90"
                        HeaderText="Game"
                        TextAlign="TextAlign.Center">
                </GridColumn>
                <GridColumn HeaderText="Point Spread"
                        TextAlign="TextAlign.Center">
                </GridColumn>
                <GridColumn HeaderText="Moneyline"
                        TextAlign="TextAlign.Center">
                </GridColumn>
                <GridColumn HeaderText="Over/Under"
                        TextAlign="TextAlign.Center">
                </GridColumn>
            </GridColumns>
            <GridTemplates>
                <RowTemplate>
                    @{
                        var game = (context as GameDto);

                        if (game?.HasStarted == false)
                        {

                            <td class="@GetCellClass(game!) ">
                                <div class="date-cell">
                                    <strong>@game?.Date.ToString("M-d")</strong>
                                </div>
                                <div class="date-cell">
                                    <strong>@game?.Date.ToString("h:mm")</strong>
                                </div>
                            </td>

                            <td id="game-link" class="@GetCellClass(game!) ">
                                                                        
                                <span id="tooltipGameContent">Game Details</span>
                                <a href="@($"/GameWagers/{game.ScoreID}")">
                                    <div class="teams-bottom">
                                        <div class="team-cell-top">
                                            <img class="team-icon-top-row" src="@($"images/{game?.AwayTeam.ToLower()}" + ".svg")" /> <strong class="team-name">@game?.AwayTeam</strong>
                                        </div>
                                        <div class="team-cell">
                                            <strong class="at-sign">@@</strong><img class="team-icon-bottom-row" src="@($"images/{game?.HomeTeam.ToLower()}" + ".svg")" /> <strong class="team-name">@game?.HomeTeam</strong>
                                        </div>
                                    </div>
                                </a>
                            </td>

                        <td class="@GetCellClass(game!)">
                                <div @onclick="(() => ChooseOrRemoveWager(game!.AwayTeam, game, BetType.POINTSPREAD))"
                         class="@GetCellClass(game!.AwayTeam, game, BetType.POINTSPREAD) cell-btn">
                                    <div style="display: flex;justify-content: space-evenly;">
                                        <strong style="margin-right:.5em;">@($"{game.PointSpread:-#.0;+#.0;+0}")</strong>
                                        <strong>@($"{game?.PointSpreadAwayTeamMoneyLine:+#;-#;}")</strong>
                                    </div>
                                    </div>
                                <div @onclick="(() => ChooseOrRemoveWager(game!.HomeTeam, game, BetType.POINTSPREAD))"
                                    class="@GetCellClass(game!.HomeTeam, game, BetType.POINTSPREAD) cell-btn">
                                    <div style="display:flex;justify-content:space-evenly;">
                                        <strong style="margin-right:.5em;">@($"{game.PointSpread:+#.0;-#.0;+0}")</strong>
                                        <strong>@($"{game?.PointSpreadHomeTeamMoneyLine:+#;-#;}")</strong>
                                    </div>
                                </div>
                            </td>
                            <td class="@GetCellClass(game!)" style="text-align:center;">
                                <div @onclick="(() => ChooseOrRemoveWager(game!.AwayTeam, game, BetType.MONEYLINE))"
                                    class="@GetCellClass(game!.AwayTeam, game, BetType.MONEYLINE) cell-btn">
                                    <strong>@($"{game?.AwayTeamMoneyLine:+#;-#;}")</strong>
                                </div>
                                <div @onclick="(() => ChooseOrRemoveWager(game!.HomeTeam, game, BetType.MONEYLINE))"
                                    class="@GetCellClass(game!.HomeTeam, game, BetType.MONEYLINE) cell-btn">
                                    <strong>@($"{game?.HomeTeamMoneyLine:+#;-#;}")</strong>
                                </div>
                            </td>
                            <td class="@GetCellClass(game!)">
                                <div @onclick="(() => ChooseOrRemoveWager(string.Concat(OverUnder.OVER.ToStringFast(), game?.ScoreID.ToString()), game!, BetType.OVERUNDER))"
                                    class="@GetCellClass(string.Concat(OverUnder.OVER.ToStringFast(), game?.ScoreID.ToString()), game!, BetType.OVERUNDER) cell-btn">
                                    <div style="display:flex;justify-content:space-evenly;">
                                        <strong>Over @game?.OverUnder</strong>
                                        <strong>@($"{game?.OverPayout:+#;-#;}")</strong>
                                    </div>
                                </div>
                                <div @onclick="(() => ChooseOrRemoveWager(string.Concat(OverUnder.UNDER.ToStringFast(), game?.ScoreID.ToString()), game!, BetType.OVERUNDER))"
                                    class="@GetCellClass(string.Concat(OverUnder.UNDER.ToStringFast(), game?.ScoreID.ToString()), game!, BetType.OVERUNDER) cell-btn">
                                    <div style="display:flex;justify-content:space-evenly;">
                                        <strong>Under @game?.OverUnder</strong>
                                        <strong>@($"{game?.UnderPayout:+#;-#;}")</strong>
                                    </div>
                                </div>
                            </td>
                        }
                    }
                </RowTemplate>
            </GridTemplates>
        </SfGrid>
    </div>

    <div class="data-grid-container-mini">
        <SfGrid ID="DataGrid" DataSource="@games?.OrderBy(g => g.DateTime)">
            <GridColumns>
                <GridColumn Width="80"
                        HeaderText="Date"
                        TextAlign="TextAlign.Center">
                </GridColumn>
                <GridColumn Width="90"
                        HeaderText="Game"
                        TextAlign="TextAlign.Center">
                </GridColumn>
                <GridColumn HeaderText="Wagers"
                        TextAlign="TextAlign.Center">
                </GridColumn>
            </GridColumns>
            <GridTemplates>
                <RowTemplate>
                    @{
                        var game = (context as GameDto);
                        if (game?.HasStarted == false)
                        {
                            <td class="@GetCellClass(game!)">
                                <div class="date-cell">
                                    <strong>@game?.Date.ToString("M-d")</strong>
                                </div>
                                <div class="date-cell">
                                    <strong>@game?.Date.ToString("h:mm")</strong>
                                </div>
                            </td>
                            <td id="game-link" class="@GetCellClass(game!)">
                                <span id="tooltipGameContent">Game Details</span>
                                <a href="@($"/GameWagers/{game.ScoreID}")">
                                    <div class="teams-bottom">
                                        <div class="team-cell-top">
                                            <img class="team-icon-top-row" src="@($"images/{game?.AwayTeam.ToLower()}" + ".svg")" /> <strong class="team-name-index">@game?.AwayTeam</strong>
                                        </div>
                                        <div class="team-cell">
                                            <strong class="at-sign-index">@@</strong><img class="team-icon-bottom-row" src="@($"images/{game?.HomeTeam.ToLower()}" + ".svg")" /> <strong class="team-name-index">@game?.HomeTeam</strong>
                                        </div>
                                    </div>
                                </a>
                            </td>
                            <td class="@GetCellClass(game!)">
                                <a href="@($"/GameWagers/{game.ScoreID}")">
                                    <div class="clickable-cell cell-btn">
                                        <strong>Wagers</strong>
                                    </div>
                                </a>
                            </td>
                        }
                    }
                </RowTemplate>
            </GridTemplates>
        </SfGrid>
    </div>
}

<SfToast @ref="ToastObj" Timeout="@time" ShowCloseButton="true" Title="Good Luck On Your New Wager!" Content="@Content">
    <ToastPosition X="Right" Y="Bottom"></ToastPosition>
    <ToastAnimationSettings>
        <ToastShowAnimationSettings Effect="@ShowAnimation"></ToastShowAnimationSettings>
        <ToastHideAnimationSettings Effect="@HideAnimation"></ToastHideAnimationSettings>
    </ToastAnimationSettings>
</SfToast>

<style>

    .e-grid .e-spinner-pane {
        display: none;
    }

    .e-toast-container .e-toast {
        background-color: rgba(0,0,0, .9);
        border: 1px solid white;
        border-radius: 10px;
        backdrop-filter: blur(10px);
    }

        .e-toast-container .e-toast:hover {
            background-color: rgba(0,0,0, .9);
        }

        .e-toast-container .e-toast .e-toast-message .e-toast-title {
            color: white;
            font-weight: 700;
        }

        .e-toast-container .e-toast .e-toast-message .e-toast-content {
            color: white;
            font-weight: 700;
        }
</style>

@code {

    #region Toast

    public SfToast ToastObj;
    int time = 60000;
    private ToastEffect ShowAnimation = ToastEffect.FadeIn;
    private ToastEffect HideAnimation = ToastEffect.FadeOut;
    private string Content => $"Thank you for choosing Bet Book.";

    #endregion

    #region Properties

    [CascadingParameter]
    public Task<AuthenticationState> AuthenticationStateTask { get; set; }

    #endregion

    #region Fields

    private bool isBusy;
    private UserModel loggedInUser;
    private int week;
    private SeasonType season;

    #endregion

    #region Collections

    private GameDto[] games;
    private List<CreateBetModel> betList = new();

    #endregion

    #region OnInitializedAsync

    protected override async Task OnInitializedAsync()
    {
        isBusy = true;
        season = DateTime.Now.CalculateSeason();
        week = season.CalculateWeek(DateTime.Now);
        games = await gameService.GetGamesByWeek(season, week);
        isBusy = false;
        await LoadAndVerifyUser();
    }

    #endregion

    #region OnAfterRenderAsync

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await CheckForSavedBetSlip();
        }
    }

    #endregion

    #region Other Methods

    private async Task ShowToast()
    {
        await ToastObj.ShowAsync();
    }

    private async Task ChooseOrRemoveWager(string winner, GameDto game, BetType betType)
    {
        betSlip.SelectOrRemoveWinnerAndGameForBet(winner, game, betType);
        await localStorage.SetAsync("CurrentBetSlip", betSlip.preBets);
    }

    private async Task CheckForSavedBetSlip()
    {
        var result = await localStorage.GetAsync<List<CreateBetModel>>("CurrentBetSlip");

        if (result.Success && result.Value.Any())
        {
            betSlip.preBets = result.Value;
        }
    }

    public string GetCellClass(string winner, GameDto game, BetType betType) => betSlip.preBets.Contains(
        betSlip.preBets.Where(b =>b.Winner == winner && b.Game.ScoreID == game.ScoreID && b.BetType == betType)
            .FirstOrDefault()!) ? "clickable-cell-active" : "clickable-cell";

    private string GetCellClass(GameDto game) => games.IndexOf(game) == games.Length - 1 ? 
        "bottom-row-cell" : "cell";

    private async Task LoadAndVerifyUser()
    {
        var authState = await AuthenticationStateTask;
        string objectId = authState.User.Claims.FirstOrDefault(c => c.Type.Contains("objectidentifier"))?.Value;
        loggedInUser = await userData.GetCurrentUserFromAuthentication(objectId) ?? new();

        if (string.IsNullOrWhiteSpace(objectId)) return;

        string firstName = authState.User.Claims.FirstOrDefault(c => c.Type.Contains("givenname"))?.Value;
        string lastName = authState.User.Claims.FirstOrDefault(c => c.Type.Contains("surname"))?.Value;
        string displayName = authState.User.Claims.FirstOrDefault(c => c.Type.Equals("name"))?.Value;
        string emailAddress = authState.User.Claims.FirstOrDefault(c => c.Type.Contains("email"))?.Value;

        bool isDirty = false;

        if (!objectId.Equals(loggedInUser.ObjectIdentifier))
        {
            isDirty = true;
            loggedInUser.ObjectIdentifier = objectId;
        }

        if (!firstName.Equals(loggedInUser.FirstName))
        {
            isDirty = true;
            loggedInUser.FirstName = firstName;
        }

        if (!lastName.Equals(loggedInUser.LastName))
        {
            isDirty = true;
            loggedInUser.LastName = lastName;
        }

        if (!displayName.Equals(loggedInUser.DisplayName))
        {
            isDirty = true;
            loggedInUser.DisplayName = displayName;
        }

        if (!emailAddress.Equals(loggedInUser.EmailAddress))
        {
            isDirty = true;
            loggedInUser.EmailAddress = emailAddress;
        }

        if (isDirty)
        {
            if (string.IsNullOrWhiteSpace(loggedInUser.UserId))
            {
                loggedInUser.AccountBalance = 10000;

                await userData.CreateUser(loggedInUser);
                return;
            }

            await userData.UpdateUser(loggedInUser);
        }
    }

    #endregion

}
