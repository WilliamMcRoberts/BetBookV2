@page "/gameWagers/{ScoreId:int}"
@inject IGameService gameService
@inject AuthenticationStateProvider authProvider
@inject IMongoUserData userData
@inject BetSlipState betSlip
@inject NavigationManager navManager

<PageTitle>gameWagers</PageTitle>

@if (isBusy)
{
    <LoadingSpinnerCircle />
}

else if (game is not null)
{
    <FootballSpinners />

    <div class="matchup-container">
        <div style="text-align:center;margin:1em auto;">
            <strong style="font-size:40px;color: darkblue;text-shadow: 0 0 2.5px #fff, 0 0 5px #fff, 0 0 7.5px #fff;">@game.Date.ToString("MM-dd")</strong>
        </div>
            <div class="matchup-title">
                <div>
                <img style="height:110px;" src="@($"images/{game.AwayTeam.ToLower()}" + ".svg")" />
                <h2 style="text-align:center;font-weight:900;">@game.AwayTeam</h2>
                </div>
                
                <strong style="font-size:55px;color:white;margin-top:.55em;color: darkblue;text-shadow: 0 0 2.5px #fff, 0 0 5px #fff, 0 0 7.5px #fff;">@@</strong>

                <div>
                <img style="height:110px;" src="@($"images/{game.HomeTeam.ToLower()}" + ".svg")" />
                <h2 style="text-align:center;font-weight:900;">@game.HomeTeam</h2>
                </div>
            </div>

        <div style="text-align:center;margin:1em auto;">
            <strong style="font-size:40px;color: darkblue;text-shadow: 0 0 2.5px #fff, 0 0 5px #fff, 0 0 7.5px #fff;">@game?.Date.ToString("hh:mm")</strong>
        </div>
    </div>

    <div class="wager-accordion-container">
        <div class="accordion-container-wager-details">
            <SfAccordion ID="AccordionElement" @ref="@Accordion">
                <AccordionEvents Created="OnAccordionCreate"></AccordionEvents>
                <AccordionItems>
                    <AccordionItem Id="AccordionItem" @bind-Expanded="@ExpandSinglesBetSlip">
                        <HeaderTemplate>
                            <strong>Singles Bet Slip || Balance - $@loggedInUser?.AccountBalance.ToString("#,##0.00")</strong>
                        </HeaderTemplate>
                        <ContentTemplate>

                            <div style="padding:10px">

                                @foreach (CreateBetModel createBetModel in betSlip.preBets)
                                {
                                    <div class="create-bet-model-container">
                                        <button @onclick="(() => betSlip.RemoveBetFromPreBetsList(createBetModel))" class="btn btn-close btn-sm close-button"></button>
                                        <div class="bet-info-container">
                                            <div class="game-bet-type">
                                                <strong>@createBetModel.Game.AwayTeam @@ @createBetModel.Game.HomeTeam</strong>
                                                <strong>@createBetModel.BetType</strong>
                                            </div>
                                            <div class="winner-moneyline-container">
                                                <strong class="winner-moneyline">@betSlip.GetWinnerSummary(createBetModel)</strong>
                                                <strong class="winner-moneyline">@betSlip.GetMoneylinePayoutForBet(createBetModel.Winner, createBetModel.Game, createBetModel.BetType).ToString("+#;-#;")</strong>
                                            </div>
                                            <div class="bet-amount-input-container">
                                                <strong style="margin:.25em .25em">$</strong>
                                                <input class="bet-amount-input" type="number" @bind-value="@createBetModel.BetAmount" @bind-value:event="oninput" />
                                            </div>
                                        </div>
                                    </div>
                                }

                                <div style="text-align:center;margin:1em 1em;">
                                    <strong>Total Singles Payout</strong>
                                    <strong>$@betSlip.GetPayoutForTotalBetsSingles().ToString("#,##0.00")</strong>
                                </div>

                                @if (betSlip.gameHasStarted)
                                {
                                            <h6 style="color:red;text-align:center;margin-top:1.5em;font-size:20px;font-weight:700;margin:0 auto;">* @betSlip.startedGameDescription has already started *</h6>
                                }
                                @if (userStatusBad)
                                {
                                        <h6 style="color:red;text-align:center;font-size:15px;font-weight:700;margin:.5em auto;">* Must Bet Logged In To Submit Wager *</h6>
                                }
                                @if (betSlip.betAmountForSinglesBad)
                                {
                                        <h6 style="color:red;text-align:center;font-size:15px;font-weight:700;margin:.5em auto;">* All Wagers Must Have A Bet Amount *</h6>
                                }

                                <div class="frame">
                                    <button @onclick="SubmitSinglesBetSlip" class="custom-btn btn-submit-wager"><span>Submit Wager</span></button>
                                </div>

                            </div>
                        </ContentTemplate>
                    </AccordionItem>
                    <AccordionItem Id="AccordionItem" @bind-Expanded="@ExpandParleyBetSlip">
                        <HeaderTemplate>
                            <strong>Parley Bet Slip || Balance - $@loggedInUser?.AccountBalance.ToString("#,##0.00")</strong>
                        </HeaderTemplate>
                        <ContentTemplate>
                            <div style="padding:10px">

                                @foreach (CreateBetModel createBetModel in betSlip.preBets)
                                {
                                    <div class="create-bet-model-container">
                                        <button @onclick="(() => betSlip.RemoveBetFromPreBetsList(createBetModel))" class="btn btn-close btn-sm close-button"></button>
                                        <div class="bet-info-container">
                                            <div class="game-bet-type-parley">
                                                <strong>@createBetModel.Game.AwayTeam @@ @createBetModel.Game.HomeTeam</strong>
                                                <strong>@createBetModel.BetType</strong>
                                            </div>
                                            <div class="winner-moneyline-container-parley">
                                                <strong class="winner-moneyline-parley">@betSlip.GetWinnerSummary(createBetModel)</strong>
                                                <strong class="winner-moneyline-parley">@betSlip.GetMoneylinePayoutForBet(createBetModel.Winner, createBetModel.Game, createBetModel.BetType).ToString("+#;-#;")</strong>
                                            </div>
                                        </div>
                                    </div>
                                }

                                <div style="display:flex;flex-direction:column;">

                                    <div style="display:flex;flex-direction:column;width:35%;margin:.5em auto;text-align:center;">
                                        <strong style="text-align:center;">Wager Amount</strong>
                                        <div style="display:flex;justify-content:center;">
                                            <strong style="margin:.25em .25em">$</strong>
                                            <input type="number" @bind-value="@betSlip.totalWagerForParley" @bind-value:event="oninput" />
                                        </div>
                                    </div>

                                    <div style="text-align:center;margin:.5em 1em;display:flex;flex-direction:column;">
                                        <strong>Total Parley Payout</strong>
                                        <strong>$@betSlip.GetPayoutForTotalBetsParley().ToString("#,##0.00")</strong>
                                    </div>

                                </div>
                                @if (parleyBetCountBad)
                                {
                                    <h6 style="color:red;text-align:center;font-size:15px;font-weight:700;margin:.5em auto;">* Parley Bet Slip Must Have At Least 2 Wagers *</h6>
                                }
                                @if (userStatusBad)
                                {
                                        <h6 style="color:red;text-align:center;font-size:15px;font-weight:700;margin:.5em auto;">* Must Bet Logged In To Submit Wager *</h6>
                                }
                                @if (betSlip.parleyBetAmountBad && betSlip.totalWagerForParley <= 0)
                                {
                                        <h6 style="color:red;text-align:center;font-size:15px;font-weight:700;margin:.5em auto;">* Parley Bet Must Have A Wager Amount *</h6>
                                }
                                @if (betSlip.conflictingBetsForParley)
                                {
                                        <h6 style="color:red;text-align:center;font-size:15px;font-weight:700;margin:.5em auto;">* Conflicting Bets In Parley *</h6>
                                }

                                <div class="frame">
                                    <button @onclick="SubmitParleyBetSlip" class="custom-btn btn-submit-wager"><span>Submit Wager</span></button>
                                </div>

                            </div>
                        </ContentTemplate>
                    </AccordionItem>
                </AccordionItems>
            </SfAccordion>
        </div>
        <div class="wager-container">

            <div style="display:flex;flex-direction:column;
">
                    <div class="bet-type-title-container">
                        <label class="bet-type">Point Spread</label>
                    </div>
                <div style="background:white;box-shadow: 7.5px 7.5px 20px black;">
                    <div @onclick="(() => betSlip.SelectOrRemoveWinnerAndGameForBet(game!.AwayTeam, game, BetType.POINTSPREAD))" class="@GetCellClass(game!.AwayTeam, game, BetType.POINTSPREAD) wager-cell-top cell-btn">
                        <strong class="bet-text">@game?.AwayTeam</strong>
                        <strong class="bet-text">@($"{game?.PointSpread:-#.0;+#.0;}")</strong>
                        <strong class="bet-text">@($"{game?.PointSpreadAwayTeamMoneyLine:+#;-#;}")</strong>
                        </div>
                    <div @onclick="(() => betSlip.SelectOrRemoveWinnerAndGameForBet(game!.HomeTeam, game, BetType.POINTSPREAD))" class="@GetCellClass(game!.HomeTeam, game, BetType.POINTSPREAD) wager-cell-bottom cell-btn">
                        <strong class="bet-text">@game?.HomeTeam</strong>
                        <strong class="bet-text">@($"{game?.PointSpread:+#.0;-#.0;}")</strong>
                        <strong class="bet-text">@($"{game?.PointSpreadHomeTeamMoneyLine:+#;-#;}")</strong>
                        </div>
                    </div>
            </div>

            <div style="display:flex;flex-direction:column;">
                <div class="bet-type-title-container">
                    <label class="bet-type">Moneyline</label>
                </div>
            <div style="background:white;box-shadow: 7.5px 7.5px 20px black;">
                <div @onclick="(() => betSlip.SelectOrRemoveWinnerAndGameForBet(game!.AwayTeam, game, BetType.MONEYLINE))" class="@GetCellClass(game!.AwayTeam, game, BetType.MONEYLINE) wager-cell-top cell-btn">
                        <strong class="bet-text">@game?.AwayTeam</strong>
                    <strong class="bet-text">@($"{game?.AwayTeamMoneyLine:+#;-#;}")</strong>
                    </div>
                <div @onclick="(() => betSlip.SelectOrRemoveWinnerAndGameForBet(game!.HomeTeam, game, BetType.MONEYLINE))" class="@GetCellClass(game!.HomeTeam, game, BetType.MONEYLINE) wager-cell-bottom cell-btn">
                    <strong class="bet-text">@game?.HomeTeam</strong>
                    <strong class="bet-text">@($"{game?.HomeTeamMoneyLine:+#;-#;}")</strong>
                    </div>
                </div>
            </div>

            <div style="display:flex;flex-direction:column;">
                <div class="bet-type-title-container">
                    <label class="bet-type">OverUnder</label>
                </div>
            <div style="background:white;box-shadow: 7.5px 7.5px 20px black;">
                <div @onclick="(() => betSlip.SelectOrRemoveWinnerAndGameForBet(string.Concat(OverUnder.OVER.ToStringFast(), game?.ScoreID.ToString()), game!, BetType.OVERUNDER))" class="@GetCellClass(string.Concat(OverUnder.OVER.ToStringFast(), game?.ScoreID.ToString()), game!, BetType.OVERUNDER) wager-cell-top cell-btn">
                    <strong class="bet-text">Over @($"{game?.OverUnder:#.#}")</strong>
                    <strong class="bet-text">@($"{game?.OverPayout:+#;-#;}")</strong>
                    </div>
                <div @onclick="(() => betSlip.SelectOrRemoveWinnerAndGameForBet(string.Concat(OverUnder.UNDER.ToStringFast(), game?.ScoreID.ToString()), game!, BetType.OVERUNDER))" class="@GetCellClass(string.Concat(OverUnder.UNDER.ToStringFast(), game?.ScoreID.ToString()), game!, BetType.OVERUNDER) wager-cell-bottom cell-btn">
                    <strong class="bet-text">Under @($"{game?.OverUnder:#.#}")</strong>
                    <strong class="bet-text">@($"{game?.UnderPayout:+#;-#;}")</strong>
                    </div>
                </div>
            </div>
        </div>
    </div>
}

<SfToast @ref="ToastObj" Timeout="@time" ShowCloseButton="true" Title="Good Luck On Your New Wager!" Content="@Content">
    <ToastPosition X="Right" Y="Bottom"></ToastPosition>
    <ToastAnimationSettings>
        <ToastShowAnimationSettings Effect="@ShowAnimation"></ToastShowAnimationSettings>
        <ToastHideAnimationSettings Effect="@HideAnimation"></ToastHideAnimationSettings>
    </ToastAnimationSettings>
</SfToast>

<style>
    .e-toast-container .e-toast {
        background-color: rgba(0,0,0, .9);
        border: 1px solid white;
        border-radius: 10px;
        backdrop-filter: blur(10px);
    }

        .e-toast-container .e-toast:hover {
            background-color: rgba(0,0,0, .9);
        }

        .e-toast-container .e-toast .e-toast-message .e-toast-title {
            color: white;
            font-weight: 700;
        }

        .e-toast-container .e-toast .e-toast-message .e-toast-content {
            color: white;
            font-weight: 700;
        }
</style>

<a href="javascript:void(0);">
    <img id="doge" src="images/doge.png" alt="doge.png">
</a>

@code {
    [Parameter]
    public int ScoreId { get; set; }

    #region Toast
    public SfToast ToastObj;
    private ToastEffect ShowAnimation = ToastEffect.FadeIn;
    private ToastEffect HideAnimation = ToastEffect.FadeOut;
    private string Content => $"Thank you for choosing Bet Book.";
    int time = 60000;
    #endregion

    #region Properties
    private bool ExpandSinglesBetSlip { get; set; }
    private bool ExpandParleyBetSlip { get; set; }
    private bool parleyBetCountBad => betSlip.preBets.Count < 2;
    #endregion

    #region Fields
    private int week;
    private SeasonType season;
    private GameDto game;
    private SfAccordion Accordion;
    private bool userStatusBad;
    private bool showToastSingle;
    private bool showToastParley;
    private bool isBusy;
    private UserModel loggedInUser;
    #endregion

    #region Collections
    private GameDto[] games;
    private List<GameDto> gameList = new();
    #endregion

    #region OnInitialized
    protected override async Task OnInitializedAsync()
    {
        isBusy = true;
        season = DateTime.Now.CalculateSeason();
        week = season.CalculateWeek(DateTime.Now);
        games = await gameService.GetGamesByWeek(season, week);
        game = games.Where(g => g.ScoreID == ScoreId).FirstOrDefault();
        isBusy = false;
        loggedInUser = await authProvider.GetUserFromAuth(userData);
    }
    #endregion

    #region Other Methods
    private async Task SubmitSinglesBetSlip()
    {
        if (loggedInUser is null)
        {
            userStatusBad = true;
            return;
        }

        showToastSingle = await betSlip.OnSubmitBetsFromSinglesBetSlip(loggedInUser);

        if (showToastSingle)
            await ToastObj.ShowAsync();
    }

    private async Task SubmitParleyBetSlip()
    {
        if (loggedInUser is null)
        {
            userStatusBad = true;
            return;
        }

        showToastParley = await betSlip.OnSubmitBetsFromParleyBetSlip(loggedInUser);

        if (showToastParley)
            await ToastObj.ShowAsync();
    }

    private string GetCellClass(string winner, GameDto game, BetType betType) =>
         betSlip.preBets.Contains(betSlip.preBets.Where(
             b => b.Winner == winner && b.Game.ScoreID == game.ScoreID && b.BetType == betType)
             .FirstOrDefault()!) ? "clickable-cell-active" : "clickable-cell";

    public void OnAccordionCreate()
    {
        ExpandSinglesBetSlip = false;
        ExpandParleyBetSlip = false;
    }
    #endregion
}
