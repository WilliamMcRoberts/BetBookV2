@page "/gameWagers/{ScoreId:int}"
@inject IGameService gameService
@inject IMongoUserData userData
@inject BetSlipState betSlip
@inject NavigationManager navManager
@inject IJSRuntime js
@inject ProtectedLocalStorage localStorage

<PageTitle>gameWagers</PageTitle>

@if (isBusy)
{
    <LoadingSpinnerCircle />
}

else if (game is not null)
{
    <FootballSpinners />

    <AccordionBetSlip OnValidSubmit="@ShowToast" LoggedInUser="loggedInUser" />

    <br/>
   
    <div class="matchup-container">
        <div style="text-align:center;margin:1em auto;">
            <strong style="font-size:40px;color: darkblue;text-shadow: 0 0 2.5px #fff, 0 0 5px #fff, 0 0 7.5px #fff;">@game.Date.ToString("MM-dd")</strong>
        </div>
        <div class="matchup-title">
            <div>
                <img style="height:110px;" src="@($"images/{game.AwayTeam.ToLower()}" + ".svg")" />
                <h2 style="text-align:center;font-weight:900;">@game.AwayTeam</h2>
            </div>

            <strong style="font-size:55px;color:white;margin-top:.55em;color: darkblue;text-shadow: 0 0 2.5px #fff, 0 0 5px #fff, 0 0 7.5px #fff;">@@</strong>

            <div>
                <img style="height:110px;" src="@($"images/{game.HomeTeam.ToLower()}" + ".svg")" />
                <h2 style="text-align:center;font-weight:900;">@game.HomeTeam</h2>
            </div>
        </div>

        <div style="text-align:center;margin:1em auto;">
            <strong style="font-size:40px;color: darkblue;text-shadow: 0 0 2.5px #fff, 0 0 5px #fff, 0 0 7.5px #fff;">@game?.Date.ToString("hh:mm")</strong>
        </div>
    </div>

    <div class="container-wager-details">
        <div class="wager-container">

            <div class="wager-box">
                <div class="bet-type-title-container">
                    <label class="bet-type">Point Spread</label>
                </div>
                <div class="wager-button-container">
                    <div @onclick="(() => ChooseOrRemoveWager(game!.AwayTeam, game, BetType.POINTSPREAD))" class="@GetCellClass(game!.AwayTeam, game, BetType.POINTSPREAD) wager-cell-top cell-btn">
                        <strong class="bet-text">@game?.AwayTeam</strong>
                        <strong class="bet-text">@($"{game?.PointSpread:-#.0;+#.0;}")</strong>
                        <strong class="bet-text">@($"{game?.PointSpreadAwayTeamMoneyLine:+#;-#;}")</strong>
                    </div>
                    <div @onclick="(() => ChooseOrRemoveWager(game!.HomeTeam, game, BetType.POINTSPREAD))" class="@GetCellClass(game!.HomeTeam, game, BetType.POINTSPREAD) wager-cell-bottom cell-btn">
                        <strong class="bet-text">@game?.HomeTeam</strong>
                        <strong class="bet-text">@($"{game?.PointSpread:+#.0;-#.0;}")</strong>
                        <strong class="bet-text">@($"{game?.PointSpreadHomeTeamMoneyLine:+#;-#;}")</strong>
                    </div>
                </div>
            </div>

            <div class="wager-box">
                <div class="bet-type-title-container">
                    <label class="bet-type">Moneyline</label>
                </div>
                <div class="wager-button-container">
                    <div @onclick="(() => ChooseOrRemoveWager(game!.AwayTeam, game, BetType.MONEYLINE))" class="@GetCellClass(game!.AwayTeam, game, BetType.MONEYLINE) wager-cell-top cell-btn">
                        <strong class="bet-text">@game?.AwayTeam</strong>
                        <strong class="bet-text">@($"{game?.AwayTeamMoneyLine:+#;-#;}")</strong>
                    </div>
                    <div @onclick="(() => ChooseOrRemoveWager(game!.HomeTeam, game, BetType.MONEYLINE))" class="@GetCellClass(game!.HomeTeam, game, BetType.MONEYLINE) wager-cell-bottom cell-btn">
                        <strong class="bet-text">@game?.HomeTeam</strong>
                        <strong class="bet-text">@($"{game?.HomeTeamMoneyLine:+#;-#;}")</strong>
                    </div>
                </div>
            </div>

            <div class="wager-box">
                <div class="bet-type-title-container">
                    <label class="bet-type">OverUnder</label>
                </div>
                <div class="wager-button-container">
                    <div @onclick="(() => ChooseOrRemoveWager(string.Concat(OverUnder.OVER.ToStringFast(), game?.ScoreID.ToString()), game!, BetType.OVERUNDER))" class="@GetCellClass(string.Concat(OverUnder.OVER.ToStringFast(), game?.ScoreID.ToString()), game!, BetType.OVERUNDER) wager-cell-top cell-btn">
                        <strong class="bet-text">Over @($"{game?.OverUnder:#.#}")</strong>
                        <strong class="bet-text">@($"{game?.OverPayout:+#;-#;}")</strong>
                    </div>
                    <div @onclick="(() => ChooseOrRemoveWager(string.Concat(OverUnder.UNDER.ToStringFast(), game?.ScoreID.ToString()), game!, BetType.OVERUNDER))" class="@GetCellClass(string.Concat(OverUnder.UNDER.ToStringFast(), game?.ScoreID.ToString()), game!, BetType.OVERUNDER) wager-cell-bottom cell-btn">
                        <strong class="bet-text">Under @($"{game?.OverUnder:#.#}")</strong>
                        <strong class="bet-text">@($"{game?.UnderPayout:+#;-#;}")</strong>
                    </div>
                </div>
            </div>
        </div>
    </div>
}

<SfToast @ref="ToastObj" Timeout="@time" ShowCloseButton="true" Title="Good Luck On Your New Wager!" Content="@Content">
    <ToastPosition X="Right" Y="Bottom"></ToastPosition>
    <ToastAnimationSettings>
        <ToastShowAnimationSettings Effect="@ShowAnimation"></ToastShowAnimationSettings>
        <ToastHideAnimationSettings Effect="@HideAnimation"></ToastHideAnimationSettings>
    </ToastAnimationSettings>
</SfToast>

<style>
    .e-toast-container .e-toast {
        background-color: rgba(0,0,0, .9);
        border: 1px solid white;
        border-radius: 10px;
        backdrop-filter: blur(10px);
    }

        .e-toast-container .e-toast:hover {
            background-color: rgba(0,0,0, .9);
        }

        .e-toast-container .e-toast .e-toast-message .e-toast-title {
            color: white;
            font-weight: 700;
        }

        .e-toast-container .e-toast .e-toast-message .e-toast-content {
            color: white;
            font-weight: 700;
        }
</style>

<a href="javascript:void(0);">
    <img id="doge" src="images/doge.png" alt="doge.png">
</a>

@code {

    #region Toast
    public SfToast ToastObj;
    private ToastEffect ShowAnimation = ToastEffect.FadeIn;
    private ToastEffect HideAnimation = ToastEffect.FadeOut;
    private string Content => $"Thank you for choosing Bet Book.";
    int time = 60000;
    #endregion

    #region Properties

    [CascadingParameter]
    public Task<AuthenticationState> AuthenticationStateTask { get; set; }

    [Parameter]
    public int ScoreId { get; set; }

    #endregion

    #region Fields

    private int week;
    private SeasonType season;
    private GameDto game;
    private bool isBusy;
    private UserModel loggedInUser;

    #endregion

    #region Collections

    private GameDto[] games;
    private List<CreateBetModel> betList = new();

    #endregion

    #region OnInitializedAsync

    protected override async Task OnInitializedAsync()
    {
        isBusy = true;
        season = DateTime.Now.CalculateSeason();
        week = season.CalculateWeek(DateTime.Now);
        games = await gameService.GetGamesByWeek(season, week);
        game = games.Where(g => g.ScoreID == ScoreId).FirstOrDefault();
        isBusy = false;
        loggedInUser = await AuthenticationStateTask.GetUserFromAuth(userData);
    }

    #endregion

    #region OnAfterRenderAsync

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await CheckForSavedBetSlip();
        }
    }

    #endregion

    #region Other Methods

    private async Task ChooseOrRemoveWager(string winner, GameDto game, BetType betType)
    {
        betSlip.SelectOrRemoveWinnerAndGameForBet(winner, game, betType);
        await localStorage.SetAsync("CurrentBetSlip", betSlip.preBets);
    }

    private async Task ShowToast()
    {
        await ToastObj.ShowAsync();
    }

    private async Task CheckForSavedBetSlip()
    {
        var result = await localStorage.GetAsync<List<CreateBetModel>>("CurrentBetSlip");
        if (result.Success)
        {
            betSlip.preBets = result.Value;
        }
    }

    private string GetCellClass(string winner, GameDto game, BetType betType) =>
         betSlip.preBets.Contains(betSlip.preBets.Where(
             b => b.Winner == winner && b.Game.ScoreID == game.ScoreID && b.BetType == betType)
             .FirstOrDefault()!) ? "clickable-cell-active" : "clickable-cell";

    #endregion
}
