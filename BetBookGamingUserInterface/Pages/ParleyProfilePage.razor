@page "/ParleyProfilePage"
@inject ILogger<ParleyProfilePage> logger
@inject IMongoUserData userData
@inject AuthenticationStateProvider authProvider
@inject IMongoParleyBetSlipData parleyBetSlipData
@inject IGameService gameService

<PageTitle>ParleyProfilePage</PageTitle>

@if (isBusy)
{
        <LoadingSpinner/>
}

else
{
    <FootballSpinners />

    <div class="bar">
        <button @onclick="(() => SetParleyDataGrid(ParleyBetSlipStatus.IN_PROGRESS))" class="btn btn-light btn-sm mt-2 mb-2 bet-button">Active</button>
        <button @onclick="(() => SetParleyDataGrid(ParleyBetSlipStatus.WINNER))" class="btn btn-light btn-sm mt-2 mb-2 bet-button">Winners</button>
        <label class="grad-title" style="margin-top:.75em">Parley Bets</label>
        <button @onclick="(() => SetParleyDataGrid(ParleyBetSlipStatus.PUSH))" class="btn btn-light btn-sm mt-2 mb-2 bet-button">Push</button>
        <button @onclick="(() => SetParleyDataGrid(ParleyBetSlipStatus.LOSER))" class="btn btn-light btn-sm mt-2 mb-2 bet-button">Losers</button>
    </div>

    <div class="data-grid-container-profile-parley">
        <SfGrid ID="DataGrid" DataSource="@GetParleyBetList()">
            <GridColumns>
                <GridColumn HeaderText="# Wagers"
                            TextAlign="TextAlign.Center">
                </GridColumn>
                <GridColumn HeaderText="Bet Payout"
                            TextAlign="TextAlign.Center">
                </GridColumn>
                <GridColumn HeaderText="Date"
                            TextAlign="TextAlign.Center">
                </GridColumn>
                <GridColumn HeaderText="Games"
                            TextAlign="TextAlign.Center">
                </GridColumn>
                <GridColumn HeaderText="Winner"
                            TextAlign="TextAlign.Center">
                </GridColumn>
            </GridColumns>
            <GridTemplates>
                <RowTemplate>
                    @{
                        var bet = (context as ParleyBetSlipModel);

                        <td class="@GetCellClass(bet!)" style="text-align:center;">
                            <div style="padding: .5em .5em;">
                                <strong style="font-size:15px">@bet?.SingleBetsForParleyList.Count</strong>
                            </div>
                        </td>
                        <td class="@GetCellClass(bet!)" style="text-align:center;">
                            <div>
                                <strong style="font-size:15px">$@bet?.ParleyBetPayout.ToString("#,##0.00")</strong>
                            </div>
                        </td>
                        <td class="@GetCellClass(bet!)" style="text-align:center;">

                            @foreach (SingleBetForParleyModel singleBetForParley in bet!.SingleBetsForParleyList)
                        {
                                <div style="padding: .75em .5em;">
                                    <strong>@singleBetForParley.GameSnapshot.Date.ToString("M-d")</strong>
                                </div>
                                <div style="padding:.75em .5em;">
                                    <strong>@singleBetForParley.GameSnapshot.Date.ToString("h:mm")</strong>
                                </div>
                        }

                        </td>
                        <td class="@GetCellClass(bet!)" style="text-align:center;">

                            @foreach (SingleBetForParleyModel singleBetForParley in bet!.SingleBetsForParleyList)
                            {
                                if (bet!.SingleBetsForParleyList.IndexOf(singleBetForParley) == bet!.SingleBetsForParleyList.Count - 1)
                                {
                                    <div @onclick="((mouseArgs) => ShowGameDetailsSingleBetForParleyModal(mouseArgs, singleBetForParley))" class="teams-bottom">
                                        <div style="padding: .45em .5em;">
                                            <img class="team-icon-top-row" src="@string.Concat($"images/{singleBetForParley?.GameSnapshot.AwayTeam.ToLower()}", ".svg")" /> <strong class="team-name">@singleBetForParley?.GameSnapshot.AwayTeam</strong>
                                        </div>
                                        <div style="padding:.45em .5em;">
                                            <strong class="at-sign">@@</strong><img class="team-icon-bottom-row" src="@string.Concat($"images/{singleBetForParley?.GameSnapshot.HomeTeam.ToLower()}", ".svg")" /> <strong class="team-name">@singleBetForParley?.GameSnapshot.HomeTeam</strong>
                                        </div>
                                    </div>
                                }
                                else
                                {
                                    <div @onclick="((mouseArgs) => ShowGameDetailsSingleBetForParleyModal(mouseArgs, singleBetForParley))" class="teams">
                                        <div style="padding: .45em .5em;">
                                            <img class="team-icon-top-row" src="@string.Concat($"images/{singleBetForParley?.GameSnapshot.AwayTeam.ToLower()}", ".svg")" /> <strong class="team-name">@singleBetForParley?.GameSnapshot.AwayTeam</strong>
                                        </div>
                                        <div style="padding:.45em .5em;">
                                            <strong class="at-sign">@@</strong><img class="team-icon-bottom-row" src="@string.Concat($"images/{singleBetForParley?.GameSnapshot.HomeTeam.ToLower()}", ".svg")" /> <strong class="team-name">@singleBetForParley?.GameSnapshot.HomeTeam</strong>
                                        </div>
                                    </div>
                                }
                            }

                        </td>
                        <td class="@GetCellClass(bet!)">

                            @foreach (SingleBetForParleyModel singleBetForParley in bet!.SingleBetsForParleyList)
                            {
                                <div style="text-align:center;">

                                    @if (singleBetForParley?.BetType == BetType.POINTSPREAD)
                                    {
                                        <div class="cell-parley">
                                            <strong>@singleBetForParley?.WinnerChosen</strong>
                                            <strong>@GetPointsAfterSpreadForDisplay(singleBetForParley!.PointsAfterSpread)</strong>
                                        </div>
                                    }
                                    else if (singleBetForParley?.BetType == BetType.OVERUNDER)
                                    {
                                        <div class="cell-parley">
                                            <strong>@singleBetForParley?.WinnerChosen @singleBetForParley?.GameSnapshot.OverUnder</strong>
                                        </div>
                                    }
                                    else
                                    {
                                        <div class="cell-parley">
                                            <strong>@singleBetForParley?.WinnerChosen</strong>
                                        </div>
                                    }

                                </div>
                            }

                        </td>
                    }
                </RowTemplate>
            </GridTemplates>
        </SfGrid>
    </div>

    <div class="data-grid-container-profile-parley-mini">
        <SfGrid ID="DataGrid" DataSource="@GetParleyBetList()">
            <GridColumns>
                <GridColumn HeaderText="#"
                            TextAlign="TextAlign.Center">
                </GridColumn>
                <GridColumn HeaderText="Payout"
                            TextAlign="TextAlign.Center">
                </GridColumn>
                <GridColumn HeaderText="Games"
                            TextAlign="TextAlign.Center">
                </GridColumn>
                <GridColumn HeaderText="Winner"
                            TextAlign="TextAlign.Center">
                </GridColumn>
            </GridColumns>
            <GridTemplates>
                <RowTemplate>
                    @{
                        var bet = (context as ParleyBetSlipModel);

                        <td class="@GetCellClass(bet!)" style="text-align:center;">
                            <div style="padding: .5em .5em;">
                                <strong style="font-size:12px">@bet?.SingleBetsForParleyList.Count</strong>
                            </div>
                        </td>
                        <td class="@GetCellClass(bet!)" style="text-align:center;">
                            <div>
                                <strong style="font-size:12px">$@bet?.ParleyBetPayout.ToString("#,##0.00")</strong>
                            </div>
                        </td>
                        <td class="@GetCellClass(bet!)" style="text-align:center;">

                            @foreach (SingleBetForParleyModel singleBetForParley in bet!.SingleBetsForParleyList)
                            {
                                if (bet!.SingleBetsForParleyList.IndexOf(singleBetForParley) == bet!.SingleBetsForParleyList.Count - 1)
                                {
                                    <div @onclick="((mouseArgs) => ShowGameDetailsSingleBetForParleyModal(mouseArgs, singleBetForParley))" class="teams-bottom">
                                        <div style="padding: .45em .5em;">
                                            <img class="team-icon-top-row" src="@string.Concat($"images/{singleBetForParley?.GameSnapshot.AwayTeam.ToLower()}", ".svg")" /> <strong class="team-name">@singleBetForParley?.GameSnapshot.AwayTeam</strong>
                                        </div>
                                        <div style="padding:.45em .5em;">
                                            <strong class="at-sign">@@</strong><img class="team-icon-bottom-row" src="@string.Concat($"images/{singleBetForParley?.GameSnapshot.HomeTeam.ToLower()}", ".svg")" /> <strong class="team-name">@singleBetForParley?.GameSnapshot.HomeTeam</strong>
                                        </div>
                                    </div>
                                }
                                else
                                {
                                    <div @onclick="((mouseArgs) => ShowGameDetailsSingleBetForParleyModal(mouseArgs, singleBetForParley))" class="teams">
                                        <div style="padding: .45em .5em;">
                                            <img class="team-icon-top-row" src="@string.Concat($"images/{singleBetForParley?.GameSnapshot.AwayTeam.ToLower()}", ".svg")" /> <strong class="team-name">@singleBetForParley?.GameSnapshot.AwayTeam</strong>
                                        </div>
                                        <div style="padding:.45em .5em;">
                                            <strong class="at-sign">@@</strong><img class="team-icon-bottom-row" src="@string.Concat($"images/{singleBetForParley?.GameSnapshot.HomeTeam.ToLower()}", ".svg")" /> <strong class="team-name">@singleBetForParley?.GameSnapshot.HomeTeam</strong>
                                        </div>
                                    </div>
                                }
                            }

                        </td>
                        <td class="@GetCellClass(bet!)">

                            @foreach (SingleBetForParleyModel singleBetForParley in bet!.SingleBetsForParleyList)
                            {
                                <div style="text-align:center;">

                                    @if (singleBetForParley?.BetType == BetType.POINTSPREAD)
                                    {
                                        <div class="cell-parley">
                                            <strong>@singleBetForParley?.WinnerChosen @GetPointsAfterSpreadForDisplay(singleBetForParley!.PointsAfterSpread)</strong>
                                        </div>
                                    }
                                    else if (singleBetForParley?.BetType == BetType.OVERUNDER)
                                    {
                                        <div class="cell-parley">
                                            <strong>@singleBetForParley?.WinnerChosen @singleBetForParley?.GameSnapshot.OverUnder</strong>
                                        </div>
                                    }
                                    else
                                    {
                                        <div class="cell-parley">
                                            <strong>@singleBetForParley?.WinnerChosen</strong>
                                        </div>
                                    }

                                </div>
                            }

                        </td>
                    }
                </RowTemplate>
            </GridTemplates>
        </SfGrid>
    </div>
}


@code {
    [CascadingParameter]
    public ModalWrapper ModalWrapper { get; set; }

    List<ParleyBetSlipModel> bettorParleyBetSlips = new();
    List<ParleyBetSlipModel> bettorParleyBetsInProgress = new();
    List<ParleyBetSlipModel> bettorParleyBetsWinners = new();
    List<ParleyBetSlipModel> bettorParleyBetsPush = new();
    List<ParleyBetSlipModel> bettorParleyBetsLosers = new();
    UserModel loggedInUser;
    bool parleyWinnersGrid;
    bool parleyInProgressGrid;
    bool parleyPushGrid;
    bool parleyLosersGrid;
    bool isBusy;

    protected override async Task OnInitializedAsync()
    {
        isBusy = true;
        loggedInUser = await authProvider.GetUserFromAuth(userData);

        bettorParleyBetSlips = await parleyBetSlipData.GetBettorParleyBetSlips(loggedInUser.UserId);

        bettorParleyBetsInProgress =
            bettorParleyBetSlips.Where(pb =>
                pb.ParleyBetSlipStatus == ParleyBetSlipStatus.IN_PROGRESS).ToList();

        bettorParleyBetsWinners =
            bettorParleyBetSlips.Where(pb =>
                pb.ParleyBetSlipStatus == ParleyBetSlipStatus.WINNER).ToList();

        bettorParleyBetsPush =
            bettorParleyBetSlips.Where(pb =>
                pb.ParleyBetSlipStatus == ParleyBetSlipStatus.PUSH).ToList();

        bettorParleyBetsLosers =
            bettorParleyBetSlips.Where(pb =>
                pb.ParleyBetSlipStatus == ParleyBetSlipStatus.LOSER).ToList();

        isBusy = false;
    }

    private async Task ShowGameDetailsSingleBetForParleyModal(MouseEventArgs mouseEventArgs, SingleBetForParleyModel wager)
    {
        GameByScoreIdDto finishedGame = await gameService.GetGameByScoreId(wager.GameSnapshot.ScoreID);

        var ParameterArguments = new Dictionary<string, object>
            {
                ["FinishedGame"] = finishedGame,
                ["Wager"] = wager
            };

        ModalWrapper.ShowModal(mouseEventArgs, typeof(FinishedGameDetailsParleyBet), ParameterArguments);
    }

    private string GetPointsAfterSpreadForDisplay(decimal pointsAfterSpread) =>
        pointsAfterSpread < 0 ? $"- {pointsAfterSpread.ToString().Trim('-')}"
            : $"+ {pointsAfterSpread}";

    private void SetParleyDataGrid(ParleyBetSlipStatus parleyBetSlipStatus) =>
        (parleyInProgressGrid, parleyWinnersGrid, parleyPushGrid, parleyLosersGrid) =
            parleyBetSlipStatus == ParleyBetSlipStatus.LOSER ? (false, false, false, true) 
            : parleyBetSlipStatus == ParleyBetSlipStatus.WINNER ? (false, true, false, false) 
            : parleyBetSlipStatus == ParleyBetSlipStatus.PUSH ? (false, false, true, false)
            : (true, false, false, false);

    private List<ParleyBetSlipModel> GetParleyBetList() =>
        parleyLosersGrid ? bettorParleyBetsLosers 
            : parleyWinnersGrid ? bettorParleyBetsWinners 
            : parleyPushGrid ? bettorParleyBetsPush 
            : bettorParleyBetsInProgress;

    private string GetCellClass(ParleyBetSlipModel parleyBetSlip) =>
        parleyLosersGrid ? (bettorParleyBetsLosers.IndexOf(parleyBetSlip) == bettorParleyBetsLosers.Count - 1 ? "bottom-row-cell" : "cell")
            : parleyWinnersGrid ? (bettorParleyBetsWinners.IndexOf(parleyBetSlip) == bettorParleyBetsWinners.Count - 1 ? "bottom-row-cell" : "cell")
            : parleyPushGrid ? (bettorParleyBetsPush.IndexOf(parleyBetSlip) == bettorParleyBetsPush.Count - 1 ? "bottom-row-cell" : "cell")
            : bettorParleyBetsInProgress.IndexOf(parleyBetSlip) == bettorParleyBetsInProgress.Count - 1 ? "bottom-row-cell" : "cell";
}
