@page "/GameWagers/{ScoreId:int}"
@inject IGameService gameService
@inject AuthenticationStateProvider authProvider
@inject IMongoUserData userData
@inject BetSlipState betSlip
@inject NavigationManager navManager

<PageTitle>GameWagers</PageTitle>

@if (isBusy)
{
    <div class="ring">Loading
      <span id="span"></span>
    </div>
}

else if (game is not null)
{

    <div class="matchup-container">
        <div style="text-align:center">
            <strong style="font-size:40px;color:white;">@game.Date.ToString("MM-dd")</strong>
        </div>
            <div class="matchup-title">
                <div>
                    <img style="height:85px" src="@string.Concat($"images/{game.AwayTeam.ToLower()}", ".svg")" />
                </div>
                
                <strong style="font-size:40px;color:white;margin-top:.25em;">@@</strong>

                <div>
                    <img style="height:85px;" src="@string.Concat($"images/{game.HomeTeam.ToLower()}", ".svg")" />
                </div>
            </div>

        <div style="text-align:center">
            <strong style="font-size:40px;color:white;">@game?.Date.ToString("hh:mm")</strong>
        </div>
    </div>

    <div class="wager-accordion-container">
        <div class="accordion-container-wager-details">
            <SfAccordion ID="AccordionElement" @ref="@Accordion">
                <AccordionEvents Created="OnAccordionCreate"></AccordionEvents>
                <AccordionItems>
                    <AccordionItem Id="AccordionItem" Disabled=@GetDisableSinglesBetSlip() @bind-Expanded="@ExpandSinglesBetSlip">
                        <HeaderTemplate>
                            <strong>Singles Bet Slip || Balance - $@loggedInUser?.AccountBalance.ToString("#,##0.00")</strong>
                        </HeaderTemplate>
                        <ContentTemplate>

                            <div style="padding:10px">

                                @foreach (CreateBetModel createBetModel in betSlip.preBets)
                                {
                                        <div class="create-bet-model-container">
                                            <button @onclick="(() => betSlip.RemoveBetFromPreBetsList(createBetModel))" class="btn btn-close btn-sm close-button"></button>
                                            <div class="bet-info-container">
                                                <div class="game-bet-type">
                                                    <strong>@createBetModel.Game.AwayTeam @@ @createBetModel.Game.HomeTeam</strong>
                                                    <strong>@createBetModel.BetType</strong>
                                                </div>
                                                <div class="winner-moneyline-container">
                                                    <strong class="winner-moneyline">@betSlip.GetWinnerSummary(createBetModel)</strong>
                                                    <strong class="winner-moneyline">@Convert.ToDecimal(betSlip.GetMoneylinePayoutForBet(createBetModel.Winner, createBetModel.Game, createBetModel.BetType)).ToString("+#;-#;")</strong>
                                                </div>
                                                <div class="bet-amount-input-container">
                                                    <strong style="margin:.25em .25em">$</strong>
                                                    <input class="bet-amount-input" type="number" @bind-value="@createBetModel.BetAmount" @bind-value:event="oninput" />
                                                </div>
                                            </div>
                                        </div>
                                }

                                <div style="text-align:center;margin:1em 1em;">
                                    <strong>Total Singles Payout</strong>
                                    <strong>$@betSlip.GetPayoutForTotalBetsSingles().ToString("#,##0.00")</strong>
                                </div>

                                @if (betSlip.gameHasStarted)
                                {
                                            <h6 style="color:red;text-align:center;margin-top:1.5em;font-size:20px;font-weight:700;margin:0 auto;">* @betSlip.startedGameDescription has already started *</h6>
                                }
                                @if (userStatusBad)
                                {
                                        <h6 style="color:red;text-align:center;font-size:15px;font-weight:700;margin:.5em auto;">* Must Bet Logged In To Submit Wager *</h6>
                                }
                                @if (betSlip.betAmountForSinglesBad)
                                {
                                        <h6 style="color:red;text-align:center;font-size:15px;font-weight:700;margin:.5em auto;">* All Wagers Must Have A Bet Amount *</h6>
                                }

                                    <div style="text-align: center">
                                        <SfButton CssClass="e-custom" @onclick="SubmitSinglesBetSlip">Submit Singles Bet</SfButton>
                                    </div>

                            </div>
                        </ContentTemplate>
                    </AccordionItem>
                    <AccordionItem Id="AccordionItem" Disabled=@GetDisableParleyBetSlip() @bind-Expanded="@ExpandParleyBetSlip">
                        <HeaderTemplate>
                            <strong>Parley Bet Slip || Balance - $@loggedInUser?.AccountBalance.ToString("#,##0.00")</strong>
                        </HeaderTemplate>
                        <ContentTemplate>
                            <div style="padding:10px">

                                @foreach (CreateBetModel createBetModel in betSlip.preBets)
                                {
                                            <div class="create-bet-model-container">
                                            <button @onclick="(() => betSlip.RemoveBetFromPreBetsList(createBetModel))" class="btn btn-close btn-sm close-button"></button>
                                            <div class="bet-info-container">
                                                <div class="game-bet-type-parley">
                                                    <strong>@createBetModel.Game.AwayTeam @@ @createBetModel.Game.HomeTeam</strong>
                                                    <strong>@createBetModel.BetType</strong>
                                                </div>
                                                <div class="winner-moneyline-container-parley">
                                                    <strong class="winner-moneyline-parley">@betSlip.GetWinnerSummary(createBetModel)</strong>
                                                    <strong class="winner-moneyline-parley">@Convert.ToDecimal(betSlip.GetMoneylinePayoutForBet(createBetModel.Winner, createBetModel.Game, createBetModel.BetType)).ToString("+#;-#;")</strong>
                                                </div>
                                            </div>
                                        </div>
                                }

                                <div style="display:flex;flex-direction:column;">

                                    <div style="display:flex;flex-direction:column;width:35%;margin:.5em auto;text-align:center;">
                                            <strong style="text-align:center;">Wager Amount</strong>
                                        <div style="display:flex;justify-content:center;">
                                            <strong style="margin:.25em .25em">$</strong>
                                            <input type="number" @bind-value="@betSlip.totalWagerForParley" @bind-value:event="oninput" />
                                            </div>
                                    </div>

                                    <div style="text-align:center;margin:.5em 1em;display:flex;flex-direction:column;">
                                        <strong>Total Parley Payout</strong>
                                        <strong>$@betSlip.GetPayoutForTotalBetsParley().ToString("#,##0.00")</strong>
                                    </div>

                                </div>

                                @if (userStatusBad)
                                {
                                        <h6 style="color:red;text-align:center;font-size:15px;font-weight:700;margin:.5em auto;">* Must Bet Logged In To Submit Wager *</h6>
                                }
                                @if (betSlip.parleyBetAmountBad && betSlip.totalWagerForParley <= 0)
                                {
                                        <h6 style="color:red;text-align:center;font-size:15px;font-weight:700;margin:.5em auto;">* Parley Bet Must Have A Wager Amount *</h6>
                                }
                                @if (betSlip.conflictingBetsForParley)
                                {
                                        <h6 style="color:red;text-align:center;font-size:15px;font-weight:700;margin:.5em auto;">* Conflicting Bets In Parley *</h6>
                                }

                                <div style="text-align: center;margin:.5em auto;">
                                    <SfButton CssClass="e-custom" @onclick="SubmitParleyBetSlip">Submit Parley Bet</SfButton>
                                </div>

                            </div>
                        </ContentTemplate>
                    </AccordionItem>
                </AccordionItems>
            </SfAccordion>
        </div>
        <div class="wager-container">

                <div style="display:flex;flex-direction:column;">
                    <div class="bet-type-title-container">
                        <label style="">Point Spread</label>
                    </div>
                    <div style="background:white;">
                        <div @onclick="(() => betSlip.SelectOrRemoveWinnerAndGameForBet(game!.AwayTeam, game, BetType.POINTSPREAD))" class="@GetCellClass(game!.AwayTeam, game, BetType.POINTSPREAD)" style="display:flex;justify-content:space-evenly">
                            <strong style="margin:.25em .25em">@game?.AwayTeam</strong>
                        <strong style="margin:.25em .25em">@Convert.ToDecimal(game?.PointSpread).ToString("-#.0;+#.0;")</strong>
                            <strong style="margin:.25em .25em">@Convert.ToDecimal(game?.PointSpreadAwayTeamMoneyLine).ToString("+#;-#;")</strong>
                        </div>
                        <div @onclick="(() => betSlip.SelectOrRemoveWinnerAndGameForBet(game!.HomeTeam, game, BetType.POINTSPREAD))" class="@GetCellClass(game!.HomeTeam, game, BetType.POINTSPREAD)" style="display:flex;justify-content:space-evenly;">
                            <strong style="margin:.25em .25em">@game?.HomeTeam</strong>
                        <strong style="margin:.25em .25em">@Convert.ToDecimal(game?.PointSpread).ToString("+#.0;-#.0;")</strong>
                            <strong style="margin:.25em .25em">@Convert.ToDecimal(game?.PointSpreadHomeTeamMoneyLine).ToString("+#;-#;")</strong>
                        </div>
                    </div>
                </div>

                <div style="display:flex;flex-direction:column;">
                    <div class="bet-type-title-container">
                        <label style="">Moneyline</label>
                    </div>
                    <div style="background:white;">
                        <div @onclick="(() => betSlip.SelectOrRemoveWinnerAndGameForBet(game!.AwayTeam, game, BetType.MONEYLINE))" class="@GetCellClass(game!.AwayTeam, game, BetType.MONEYLINE)" style="display:flex;justify-content:space-evenly">
                            <strong style="margin:.25em .25em">@game?.AwayTeam</strong>
                            <strong style="margin:.25em .25em">@Convert.ToDecimal(game?.AwayTeamMoneyLine).ToString("+#;-#;")</strong>
                        </div>
                        <div @onclick="(() => betSlip.SelectOrRemoveWinnerAndGameForBet(game!.HomeTeam, game, BetType.MONEYLINE))" class="@GetCellClass(game!.HomeTeam, game, BetType.MONEYLINE)" style="display:flex;justify-content:space-evenly">
                            <strong style="margin:.25em .25em">@game?.HomeTeam</strong>
                            <strong style="margin:.25em .25em">@Convert.ToDecimal(game?.HomeTeamMoneyLine).ToString("+#;-#;")</strong>
                        </div>
                    </div>
                </div>

                <div style="display:flex;flex-direction:column;">
                    <div class="bet-type-title-container">
                        <label style="">OverUnder</label>
                    </div>
                    <div style="background:white;">
                            <div @onclick="(() => betSlip.SelectOrRemoveWinnerAndGameForBet(string.Concat(OverUnder.OVER.ToStringFast(), game?.ScoreID.ToString()), game!, BetType.OVERUNDER))" class="@GetCellClass(string.Concat(OverUnder.OVER.ToStringFast(), game?.ScoreID.ToString()), game!, BetType.OVERUNDER)" style="display:flex;justify-content:space-evenly">
                            <strong style="margin:.25em .25em">Over @Convert.ToDecimal(game?.OverUnder).ToString("#.#")</strong>
                            <strong style="margin:.25em .25em">@Convert.ToDecimal(game?.OverPayout).ToString("+#;-#;")</strong>
                        </div>
                            <div @onclick="(() => betSlip.SelectOrRemoveWinnerAndGameForBet(string.Concat(OverUnder.UNDER.ToStringFast(), game?.ScoreID.ToString()), game!, BetType.OVERUNDER))" class="@GetCellClass(string.Concat(OverUnder.UNDER.ToStringFast(), game?.ScoreID.ToString()), game!, BetType.OVERUNDER)" style="display:flex;justify-content:space-evenly">
                            <strong style="margin:.25em .25em">Under @Convert.ToDecimal(game?.OverUnder).ToString("#.#")</strong>
                            <strong style="margin:.25em .25em">@Convert.ToDecimal(game?.UnderPayout).ToString("+#;-#;")</strong>
                        </div>
                    </div>
                </div>
        </div>
    </div>
    }


<SfToast @ref="ToastObj" Timeout="0" ShowCloseButton="true" Title="Good Luck On Your New Wager!" Content="@Content">
    <ToastPosition X="Right" Y="Bottom"></ToastPosition>
    <ToastAnimationSettings>
        <ToastShowAnimationSettings Effect="@ShowAnimation"></ToastShowAnimationSettings>
        <ToastHideAnimationSettings Effect="@HideAnimation"></ToastHideAnimationSettings>
    </ToastAnimationSettings>
</SfToast>

<a href="javascript:void(0);">
    <img id="doge" src="images/doge.png" alt="doge.png">
</a>


<style>

    /*Toast Background*/
    .e-toast-container .e-toast {
        background-color: rgba(0,0,0, .9);
        border: 1px solid white;
        border-radius: 10px;
        backdrop-filter: blur(10px);
    }
        /*Toast Background Hover*/
        .e-toast-container .e-toast:hover {
            background-color: rgba(0,0,0, .9);
        }

        /*Toast Title*/
        .e-toast-container .e-toast .e-toast-message .e-toast-title {
            color: white;
            font-weight: 700;
        }

        /*Toast Content*/
        .e-toast-container .e-toast .e-toast-message .e-toast-content {
            color: white;
            font-weight: 700;
        }

    .e-custom {
        background-color: rgb(255,99,71, .8);
        color: #fff;
    }

        .e-custom:hover {
            background-color: #fff;
            color: rgb(255,99,71, .8);
        }

    .matchup-title {
        margin:0 auto;
        display: flex;
        justify-content: space-evenly;
    }

    .matchup-container {
        background-color: rgb(0,0,0); /*Fallback color */
        background-color: rgba(0,0,0, 0.5); /*Black w/opacity*/
        backdrop-filter: blur(10px);
        margin:0 auto;
        border: 2px solid darkblue;
        width:60%;
    }

    .bet-type-title-container {
        background-color: rgb(0,0,0); /*Fallback color */
        background-color: rgba(0,0,0, 0.5); /*Black w/opacity*/
        backdrop-filter: blur(10px);
        margin: 0 auto;
        border: 2px solid darkblue;
        color:white;
        width:100%;
        text-align:center;
        margin-top:1em;
    }

    .wager-container {
        margin: 0 auto;
        width: 60%;
    }

    .accordion-container-wager-details {
        width: 60%;
        margin: 0 auto;
        position: center;
        margin-top:1em;
    }

    .name-of-team {
        font-size: 40px;
        font-weight: 700;
        color: white;
        margin-left: .25em;
        text-decoration: underline;
    }

    @@media (max-width: 575px) {
        .wager-container {
            width:95%;
        }

        .name-of-team {
            display:none;
        }

        .accordion-container-wager-details {
            width:95%;
        }

        .matchup-container {
            width: 95%;
        }
    }

</style>

@code {

    [Parameter]
    public int ScoreId { get; set; }
    private UserModel loggedInUser;
    private GameDto[] games;
    private List<GameDto> gameList = new();
    private int week;
    private SeasonType season;
    private GameDto game;
    private SfAccordion Accordion;
    private SfToast ToastObj;
    private bool DisableSinglesBetSlip { get; set; }
    private bool DisableParleyBetSlip { get; set; }
    private bool ExpandSinglesBetSlip { get; set; }
    private bool ExpandParleyBetSlip { get; set; }
    private bool userStatusBad;
    private bool showToastSingle;
    private bool showToastParley;
    private ToastEffect ShowAnimation = ToastEffect.FadeIn;
    private ToastEffect HideAnimation = ToastEffect.FadeOut;
    private string Content => $"Thank you for choosing Bet Book.";
    private bool isBusy;

    protected override async Task OnInitializedAsync()
    {
        isBusy = true;
        season = DateTime.Now.CalculateSeason();
        week = season.CalculateWeek(DateTime.Now);
        games = await gameService.GetGamesByWeek(season, week);
        game = games.Where(g => g.ScoreID == ScoreId).FirstOrDefault();
        isBusy = false;
        loggedInUser = await authProvider.GetUserFromAuth(userData);
    }

    private async Task SubmitSinglesBetSlip()
    {
        if (loggedInUser is null)
        {
            userStatusBad = true;
            return;
        }

        showToastSingle = await betSlip.OnSubmitBetsFromSinglesBetSlip(loggedInUser);

        if (showToastSingle)
            await this.ToastObj.ShowAsync();
    }

    private async Task SubmitParleyBetSlip()
    {
        if (loggedInUser is null)
        {
            userStatusBad = true;
            return;
        }

        showToastParley = await betSlip.OnSubmitBetsFromParleyBetSlip(loggedInUser);

        if (showToastParley)
            await this.ToastObj.ShowAsync();
    }

    private bool GetDisableParleyBetSlip() =>
            ExpandSinglesBetSlip || betSlip.preBets.Count < 2 && !ExpandParleyBetSlip ? 
                true : false;

    private bool GetDisableSinglesBetSlip() => ExpandParleyBetSlip ? true : false;

    private string GetCellClass(string winner, GameDto game, BetType betType) =>
         betSlip.preBets.Contains(betSlip.preBets.Where(
             b => b.Winner == winner && b.Game.ScoreID == game.ScoreID && b.BetType == betType)
             .FirstOrDefault()!) ? "clickable-cell-active" : "clickable-cell";

    public void OnAccordionCreate()
    {
        ExpandSinglesBetSlip = false;
        ExpandParleyBetSlip = false;
        DisableParleyBetSlip = true;
    }
}
